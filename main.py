from Tests.tests_for_grover import *
from Analyze_probability.analyze_grover import analyze_probability, plot_probability

GREEN = "\033[92m"
RED = "\033[91m"
RESET = "\033[0m"

try:
    print("\nТест 1: Суперпозиция через H⊗H")
    print("  Проверяется, что гейты Адамара создают равномерную суперпозицию.")
    test_superposition()
    print(f"{GREEN}  Результат: Суперпозиция построена корректно.{RESET}")

    print("\nТест 2: Оракул AND (OracleAND)")
    print("  Проверяется, что оракул инвертирует амплитуду только у состояния |11⟩ (x = 3).")
    test_oracle_and()
    print(f"{GREEN}  Результат: Матрица оракула соответствует ожиданию.{RESET}")

    print("\nТест 3: Диффузионный оператор")
    print("  Проверяется, что диффузионный оператор корректно отражает относительно состояния Psi.")
    test_diffusion_matrix()
    print(f"{GREEN}  Результат: Отражение работает как ожидается, Psi сохраняется.{RESET}")

    print("\nТест 4: Алгоритм Гровера")
    print("  Проверяется, что алгоритм Гровера возвращает состояние x = 3 (|11⟩) с высокой вероятностью.")
    test_run_grover()
    print(f"{GREEN}  Результат: Алгоритм успешно находит целевое состояние x = 3.{RESET}")

    print("\nВсе тесты пройдены успешно. Алгоритм работает корректно, и реализация соответствует ожидаемому поведению квантового поиска на основе линейной алгебры.")

    # Анализ вероятности получения состояния |11⟩
    print("\nАнализ вероятности получения состояния |11⟩ по шагам:")
    analyze_probability(max_iterations=5)

    # Построение графика вероятности
    print("\nПостроение графика вероятности состояния |11⟩:")
    plot_probability(max_iterations=5)

except AssertionError as e:
    print(f"\n{RED}Ошибка при выполнении тестов:\n{e}{RESET}")
